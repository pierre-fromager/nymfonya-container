<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="Container.php" path="/">
    <totals>
      <lines total="284" comments="110" code="174" executable="72" executed="65" percent="90.28"/>
      <methods count="15" tested="14" percent="93.33"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="0" percent="0.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="Nymfonya\Component\Container" start="9" executable="72" executed="65" crap="38.26">
      <package full="" name="" sub="" category=""/>
      <namespace name="Nymfonya\Component"/>
      <method name="__construct" signature="__construct(array $servicesConfig)" start="40" end="46" crap="1" executable="4" executed="4" coverage="100"/>
      <method name="initReporter" signature="initReporter(): Container" start="53" end="62" crap="1" executable="7" executed="7" coverage="100"/>
      <method name="getReporter" signature="getReporter(): stdClass" start="69" end="72" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="getServices" signature="getServices(): array" start="79" end="82" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="getService" signature="getService(string $serviceName)" start="91" end="99" crap="2" executable="4" executed="4" coverage="100"/>
      <method name="setService" signature="setService(string $serviceName, $inst): Container" start="111" end="120" crap="3" executable="5" executed="5" coverage="100"/>
      <method name="load" signature="load(): Container" start="128" end="137" crap="3" executable="5" executed="5" coverage="100"/>
      <method name="create" signature="create(string $serviceName, array $serviceParams): Container" start="146" end="151" crap="1" executable="3" executed="3" coverage="100"/>
      <method name="createCoreService" signature="createCoreService(string $serviceName, array $serviceParams): Container" start="160" end="183" crap="11.98" executable="15" executed="8" coverage="53.333333333333"/>
      <method name="createDependencies" signature="createDependencies(array $serviceParams): Container" start="191" end="203" crap="4" executable="6" executed="6" coverage="100"/>
      <method name="injectService" signature="injectService($serviceName, array $serviceParams): Container" start="212" end="221" crap="3" executable="5" executed="5" coverage="100"/>
      <method name="constructable" signature="constructable($value): bool" start="229" end="242" crap="4" executable="8" executed="8" coverage="100"/>
      <method name="hasService" signature="hasService(string $serviceName): bool" start="250" end="259" crap="2" executable="5" executed="5" coverage="100"/>
      <method name="isBasicType" signature="isBasicType($value): bool" start="267" end="270" crap="3" executable="1" executed="1" coverage="100"/>
      <method name="setServiceConfig" signature="setServiceConfig(array $servicesConfig): Container" start="279" end="283" crap="1" executable="2" executed="2" coverage="100"/>
    </class>
    <coverage>
      <line nr="165">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testCreateCoreService"/>
      </line>
      <line nr="174">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testCreateCoreService"/>
      </line>
      <line nr="176">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testCreateCoreService"/>
      </line>
      <line nr="42">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testInstance"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testInitReporter"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testGetServices"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testGetService"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testGetServiceException"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testSetService"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testSetServiceNoClassException"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testSetServiceNotObjectException"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testConstructable"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testHasService"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testLoad"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testSetServiceConfig"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testLoadException"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testCreate"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testIsBasicType"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testCreateCoreService"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testCreateDependencies"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testInjectService"/>
      </line>
      <line nr="43">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testInstance"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testInitReporter"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testGetServices"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testGetService"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testGetServiceException"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testSetService"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testSetServiceNoClassException"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testSetServiceNotObjectException"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testConstructable"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testHasService"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testLoad"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testSetServiceConfig"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testLoadException"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testCreate"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testIsBasicType"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testCreateCoreService"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testCreateDependencies"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testInjectService"/>
      </line>
      <line nr="44">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testInstance"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testInitReporter"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testGetServices"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testGetService"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testGetServiceException"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testSetService"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testSetServiceNoClassException"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testSetServiceNotObjectException"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testConstructable"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testHasService"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testLoad"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testSetServiceConfig"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testLoadException"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testCreate"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testIsBasicType"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testCreateCoreService"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testCreateDependencies"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testInjectService"/>
      </line>
      <line nr="45">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testInstance"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testInitReporter"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testGetServices"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testGetService"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testGetServiceException"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testSetService"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testSetServiceNoClassException"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testSetServiceNotObjectException"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testConstructable"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testHasService"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testLoad"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testSetServiceConfig"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testLoadException"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testCreate"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testIsBasicType"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testCreateCoreService"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testCreateDependencies"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testInjectService"/>
      </line>
      <line nr="55">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testInitReporter"/>
      </line>
      <line nr="56">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testInitReporter"/>
      </line>
      <line nr="57">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testInitReporter"/>
      </line>
      <line nr="58">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testInitReporter"/>
      </line>
      <line nr="59">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testInitReporter"/>
      </line>
      <line nr="60">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testInitReporter"/>
      </line>
      <line nr="61">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testInitReporter"/>
      </line>
      <line nr="71">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testInitReporter"/>
      </line>
      <line nr="81">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testGetServices"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testCreate"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testCreateCoreService"/>
      </line>
      <line nr="93">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testGetService"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testGetServiceException"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testSetService"/>
      </line>
      <line nr="94">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testGetServiceException"/>
      </line>
      <line nr="95">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testGetServiceException"/>
      </line>
      <line nr="98">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testGetService"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testSetService"/>
      </line>
      <line nr="113">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testSetService"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testSetServiceNoClassException"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testSetServiceNotObjectException"/>
      </line>
      <line nr="114">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testSetServiceNoClassException"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testSetServiceNotObjectException"/>
      </line>
      <line nr="115">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testSetServiceNoClassException"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testSetServiceNotObjectException"/>
      </line>
      <line nr="118">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testSetService"/>
      </line>
      <line nr="119">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testSetService"/>
      </line>
      <line nr="130">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testLoad"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testLoadException"/>
      </line>
      <line nr="131">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testLoadException"/>
      </line>
      <line nr="133">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testLoad"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testLoadException"/>
      </line>
      <line nr="134">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testLoad"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testLoadException"/>
      </line>
      <line nr="136">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testLoad"/>
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testLoadException"/>
      </line>
      <line nr="148">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testCreate"/>
      </line>
      <line nr="149">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testCreate"/>
      </line>
      <line nr="150">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testCreate"/>
      </line>
      <line nr="162">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testCreateCoreService"/>
      </line>
      <line nr="163">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testCreateCoreService"/>
      </line>
      <line nr="178">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testCreateCoreService"/>
      </line>
      <line nr="179">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testCreateCoreService"/>
      </line>
      <line nr="182">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testCreateCoreService"/>
      </line>
      <line nr="193">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testCreateDependencies"/>
      </line>
      <line nr="194">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testCreateDependencies"/>
      </line>
      <line nr="195">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testCreateDependencies"/>
      </line>
      <line nr="196">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testCreateDependencies"/>
      </line>
      <line nr="199">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testCreateDependencies"/>
      </line>
      <line nr="202">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testCreateDependencies"/>
      </line>
      <line nr="214">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testInjectService"/>
      </line>
      <line nr="215">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testInjectService"/>
      </line>
      <line nr="216">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testInjectService"/>
      </line>
      <line nr="217">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testInjectService"/>
      </line>
      <line nr="220">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testInjectService"/>
      </line>
      <line nr="231">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testConstructable"/>
      </line>
      <line nr="232">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testConstructable"/>
      </line>
      <line nr="234">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testConstructable"/>
      </line>
      <line nr="235">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testConstructable"/>
      </line>
      <line nr="236">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testConstructable"/>
      </line>
      <line nr="237">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testConstructable"/>
      </line>
      <line nr="239">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testConstructable"/>
      </line>
      <line nr="241">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testConstructable"/>
      </line>
      <line nr="252">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testHasService"/>
      </line>
      <line nr="253">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testHasService"/>
      </line>
      <line nr="254">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testHasService"/>
      </line>
      <line nr="256">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testHasService"/>
      </line>
      <line nr="258">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testHasService"/>
      </line>
      <line nr="269">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testIsBasicType"/>
      </line>
      <line nr="281">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testSetServiceConfig"/>
      </line>
      <line nr="282">
        <covered by="Nymfonya\Component\Container\Tests\ContainerTest::testSetServiceConfig"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2"/>
      <line no="3">
        <token name="T_DECLARE">declare</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strict_types</token>
        <token name="T_EQUAL">=</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="4"/>
      <line no="5">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Nymfonya</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Component</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="6"/>
      <line no="7">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">stdClass</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="8"/>
      <line no="9">
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Container</token>
      </line>
      <line no="10">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="11"/>
      <line no="12">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">_CONSTRUCT</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'__construct'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="13"/>
      <line no="14">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="15">
        <token name="T_DOC_COMMENT">     * is the config array</token>
      </line>
      <line no="16">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="17">
        <token name="T_DOC_COMMENT">     * @var array</token>
      </line>
      <line no="18">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="19">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$servicesConfig</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="20"/>
      <line no="21">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="22">
        <token name="T_DOC_COMMENT">     * service storage</token>
      </line>
      <line no="23">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="24">
        <token name="T_DOC_COMMENT">     * @var array</token>
      </line>
      <line no="25">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="26">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$services</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="27"/>
      <line no="28">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="29">
        <token name="T_DOC_COMMENT">     * reporter</token>
      </line>
      <line no="30">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="31">
        <token name="T_DOC_COMMENT">     * @var stdClass</token>
      </line>
      <line no="32">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="33">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$reporter</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="34"/>
      <line no="35">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="36">
        <token name="T_DOC_COMMENT">     * instanciate</token>
      </line>
      <line no="37">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="38">
        <token name="T_DOC_COMMENT">     * @param array $servicesConfig</token>
      </line>
      <line no="39">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="40">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">__construct</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$servicesConfig</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="41">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="42">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">setServiceConfig</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$servicesConfig</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="43">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">services</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="44">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">initReporter</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="45">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">load</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="46">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="47"/>
      <line no="48">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="49">
        <token name="T_DOC_COMMENT">     * init reporter</token>
      </line>
      <line no="50">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="51">
        <token name="T_DOC_COMMENT">     * @return Container</token>
      </line>
      <line no="52">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="53">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">initReporter</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Container</token>
      </line>
      <line no="54">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="55">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">reporter</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">stdClass</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="56">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">reporter</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">injected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="57">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">reporter</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">constructable</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="58">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">reporter</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">unconstructable</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="59">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">reporter</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">exists</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="60">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">reporter</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">notexists</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="61">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="62">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="63"/>
      <line no="64">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="65">
        <token name="T_DOC_COMMENT">     * returns reporter</token>
      </line>
      <line no="66">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="67">
        <token name="T_DOC_COMMENT">     * @return object</token>
      </line>
      <line no="68">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="69">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getReporter</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">stdClass</token>
      </line>
      <line no="70">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="71">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">reporter</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="72">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="73"/>
      <line no="74">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="75">
        <token name="T_DOC_COMMENT">     * return all services's container</token>
      </line>
      <line no="76">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="77">
        <token name="T_DOC_COMMENT">     * @return array</token>
      </line>
      <line no="78">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="79">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getServices</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="80">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="81">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">services</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="82">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="83"/>
      <line no="84">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="85">
        <token name="T_DOC_COMMENT">     * return service from classname</token>
      </line>
      <line no="86">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="87">
        <token name="T_DOC_COMMENT">     * @param string $serviceName</token>
      </line>
      <line no="88">
        <token name="T_DOC_COMMENT">     * @return object</token>
      </line>
      <line no="89">
        <token name="T_DOC_COMMENT">     * @throws Exception</token>
      </line>
      <line no="90">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="91">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getService</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$serviceName</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="92">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="93">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">hasService</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$serviceName</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="94">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Exception</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="95">
        <token name="T_WHITESPACE">                </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Container service %s undefined'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$serviceName</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="96">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="97">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="98">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">services</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$serviceName</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="99">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="100"/>
      <line no="101">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="102">
        <token name="T_DOC_COMMENT">     * set an object instance for a service name</token>
      </line>
      <line no="103">
        <token name="T_DOC_COMMENT">     * this should be used in test to mock a service</token>
      </line>
      <line no="104">
        <token name="T_DOC_COMMENT">     * or update an existing service yet instanciated</token>
      </line>
      <line no="105">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="106">
        <token name="T_DOC_COMMENT">     * @param string $serviceName</token>
      </line>
      <line no="107">
        <token name="T_DOC_COMMENT">     * @param mixed $inst</token>
      </line>
      <line no="108">
        <token name="T_DOC_COMMENT">     * @return Container</token>
      </line>
      <line no="109">
        <token name="T_DOC_COMMENT">     * @throws Exception</token>
      </line>
      <line no="110">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="111">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">setService</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$serviceName</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$inst</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Container</token>
      </line>
      <line no="112">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="113">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EMPTY">empty</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$serviceName</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_object</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$inst</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="114">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Exception</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="115">
        <token name="T_WHITESPACE">                </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Container invalid argument'</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="116">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="117">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="118">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">services</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$serviceName</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$inst</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="119">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="120">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="121"/>
      <line no="122">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="123">
        <token name="T_DOC_COMMENT">     * load service from config service</token>
      </line>
      <line no="124">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="125">
        <token name="T_DOC_COMMENT">     * @return Container</token>
      </line>
      <line no="126">
        <token name="T_DOC_COMMENT">     * @throws Exception</token>
      </line>
      <line no="127">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="128">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">load</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Container</token>
      </line>
      <line no="129">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="130">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">count</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">servicesConfig</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="131">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Exception</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Container config missing'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="132">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="133">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">servicesConfig</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$serviceName</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$serviceParams</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="134">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">create</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$serviceName</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$serviceParams</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="135">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="136">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="137">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="138"/>
      <line no="139">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="140">
        <token name="T_DOC_COMMENT">     * create a service and append in service containter</token>
      </line>
      <line no="141">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="142">
        <token name="T_DOC_COMMENT">     * @param string $serviceName</token>
      </line>
      <line no="143">
        <token name="T_DOC_COMMENT">     * @param array $serviceParams</token>
      </line>
      <line no="144">
        <token name="T_DOC_COMMENT">     * @return Container</token>
      </line>
      <line no="145">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="146">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">create</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$serviceName</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$serviceParams</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Container</token>
      </line>
      <line no="147">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="148">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">createDependencies</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$serviceParams</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="149">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">createCoreService</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$serviceName</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$serviceParams</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="150">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="151">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="152"/>
      <line no="153">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="154">
        <token name="T_DOC_COMMENT">     * create core service</token>
      </line>
      <line no="155">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="156">
        <token name="T_DOC_COMMENT">     * @param string $serviceName</token>
      </line>
      <line no="157">
        <token name="T_DOC_COMMENT">     * @param array $serviceParams</token>
      </line>
      <line no="158">
        <token name="T_DOC_COMMENT">     * @return Container</token>
      </line>
      <line no="159">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="160">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">createCoreService</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$serviceName</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$serviceParams</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Container</token>
      </line>
      <line no="161">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="162">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">constructable</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$serviceName</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="163">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">hasService</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$serviceName</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="164">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$args</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_map</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="165">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">is_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="166">
        <token name="T_WHITESPACE">                        </token>
        <token name="T_VARIABLE">$values</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="167">
        <token name="T_WHITESPACE">                        </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="168">
        <token name="T_WHITESPACE">                            </token>
        <token name="T_VARIABLE">$values</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">constructable</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="169">
        <token name="T_WHITESPACE">                                </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">services</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="170">
        <token name="T_WHITESPACE">                                </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$i</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="171">
        <token name="T_WHITESPACE">                        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="172">
        <token name="T_WHITESPACE">                        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$values</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="173">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="174">
        <token name="T_WHITESPACE">                        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">constructable</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="175">
        <token name="T_WHITESPACE">                            </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">services</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="176">
        <token name="T_WHITESPACE">                            </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="177">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="178">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$serviceParams</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="179">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">injectService</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$serviceName</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$args</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="180">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="181">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="182">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="183">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="184"/>
      <line no="185">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="186">
        <token name="T_DOC_COMMENT">     * create dependent services</token>
      </line>
      <line no="187">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="188">
        <token name="T_DOC_COMMENT">     * @param array $serviceParams</token>
      </line>
      <line no="189">
        <token name="T_DOC_COMMENT">     * @return Container</token>
      </line>
      <line no="190">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="191">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">createDependencies</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$serviceParams</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Container</token>
      </line>
      <line no="192">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="193">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$serviceParams</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$serviceParam</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="194">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">is_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$serviceParam</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="195">
        <token name="T_WHITESPACE">                </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$serviceParam</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$serviceParamsItem</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="196">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">injectService</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$serviceParamsItem</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="197">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="198">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="199">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">injectService</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$serviceParam</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="200">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="201">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="202">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="203">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="204"/>
      <line no="205">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="206">
        <token name="T_DOC_COMMENT">     * inject service in container</token>
      </line>
      <line no="207">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="208">
        <token name="T_DOC_COMMENT">     * @param mixed $serviceName</token>
      </line>
      <line no="209">
        <token name="T_DOC_COMMENT">     * @param array $serviceParams</token>
      </line>
      <line no="210">
        <token name="T_DOC_COMMENT">     * @return Container</token>
      </line>
      <line no="211">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="212">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">injectService</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$serviceName</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$serviceParams</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Container</token>
      </line>
      <line no="213">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="214">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">constructable</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$serviceName</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="215">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">hasService</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$serviceName</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="216">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">reporter</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">injected</token>
        <token name="T_INC">++</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="217">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">services</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$serviceName</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$serviceName</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ELLIPSIS">...</token>
        <token name="T_VARIABLE">$serviceParams</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="218">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="219">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="220">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="221">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="222"/>
      <line no="223">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="224">
        <token name="T_DOC_COMMENT">     * return true is service class exists with a constructor</token>
      </line>
      <line no="225">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="226">
        <token name="T_DOC_COMMENT">     * @param mixed $serviceName</token>
      </line>
      <line no="227">
        <token name="T_DOC_COMMENT">     * @return boolean</token>
      </line>
      <line no="228">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="229">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">constructable</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="230">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="231">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">isBasicType</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="232">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="233">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="234">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$constructable</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">class_exists</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="235">
        <token name="T_WHITESPACE">            </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_callable</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">_CONSTRUCT</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="236">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$constructable</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="237">
        <token name="T_WHITESPACE">            </token>
        <token name="T_INC">++</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">reporter</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">constructable</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="238">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="239">
        <token name="T_WHITESPACE">            </token>
        <token name="T_INC">++</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">reporter</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">unconstructable</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="240">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="241">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$constructable</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="242">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="243"/>
      <line no="244">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="245">
        <token name="T_DOC_COMMENT">     * return true if service instanciated in container</token>
      </line>
      <line no="246">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="247">
        <token name="T_DOC_COMMENT">     * @param string $serviceName</token>
      </line>
      <line no="248">
        <token name="T_DOC_COMMENT">     * @return boolean</token>
      </line>
      <line no="249">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="250">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">hasService</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$serviceName</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="251">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="252">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$exists</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ISSET">isset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">services</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$serviceName</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="253">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$exists</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="254">
        <token name="T_WHITESPACE">            </token>
        <token name="T_INC">++</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">reporter</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">exists</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="255">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="256">
        <token name="T_WHITESPACE">            </token>
        <token name="T_INC">++</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">reporter</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">notexists</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="257">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="258">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ISSET">isset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">services</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$serviceName</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="259">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="260"/>
      <line no="261">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="262">
        <token name="T_DOC_COMMENT">     * return true if is boolean or int types</token>
      </line>
      <line no="263">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="264">
        <token name="T_DOC_COMMENT">     * @param mixed $value</token>
      </line>
      <line no="265">
        <token name="T_DOC_COMMENT">     * @return boolean</token>
      </line>
      <line no="266">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="267">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">isBasicType</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="268">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="269">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">is_int</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_bool</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_object</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="270">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="271"/>
      <line no="272">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="273">
        <token name="T_DOC_COMMENT">     * set config for service</token>
      </line>
      <line no="274">
        <token name="T_DOC_COMMENT">     * testing purpose</token>
      </line>
      <line no="275">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="276">
        <token name="T_DOC_COMMENT">     * @param array $servicesConfig</token>
      </line>
      <line no="277">
        <token name="T_DOC_COMMENT">     * @return Container</token>
      </line>
      <line no="278">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="279">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">setServiceConfig</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$servicesConfig</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Container</token>
      </line>
      <line no="280">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="281">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">servicesConfig</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$servicesConfig</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="282">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="283">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="284">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="285"/>
    </source>
  </file>
</phpunit>
